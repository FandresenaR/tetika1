/**
 * Script pour forcer la synchronisation et nettoyer les mod√®les obsol√®tes
 */

console.log('üîÑ Synchronisation forc√©e des mod√®les OpenRouter...\n');

async function syncModels() {
  try {
    // Appeler l'API de synchronisation
    const response = await fetch('http://localhost:3000/api/models/sync', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    
    console.log('‚úÖ Synchronisation r√©ussie!\n');
    console.log('üìä Statistiques:');
    console.log(`  Total de mod√®les: ${data.count}`);
    console.log(`  Mod√®les gratuits uniquement: Oui`);
    console.log(`  Timestamp: ${new Date(data.timestamp).toLocaleString('fr-FR')}`);
    
    if (data.models && data.models.length > 0) {
      console.log(`\nüéØ Premiers mod√®les disponibles:`);
      data.models.slice(0, 10).forEach((model, i) => {
        console.log(`  ${i + 1}. ${model.name} (${model.id})`);
      });
      
      // V√©rifier si le mod√®le probl√©matique existe
      const problematicModel = 'deepseek/deepseek-r1-distill-qwen-14b:free';
      const exists = data.models.some(m => m.id === problematicModel);
      
      console.log(`\nüîç V√©rification du mod√®le probl√©matique:`);
      console.log(`  ID: ${problematicModel}`);
      console.log(`  Existe: ${exists ? '‚úÖ OUI' : '‚ùå NON (supprim√©)'}`);
      
      if (!exists) {
        console.log(`\n‚úÖ Le mod√®le a √©t√© correctement supprim√© de la liste!`);
      } else {
        console.log(`\n‚ö†Ô∏è  Le mod√®le existe encore - v√©rifier l'API OpenRouter`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la synchronisation:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° Le serveur Next.js doit √™tre d√©marr√©:');
      console.log('   npm run dev');
    }
  }
}

syncModels();
