/**
 * Script de v√©rification de la synchronisation ModelSelector
 * V√©rifie que ModelSelector et SettingsModal utilisent bien la m√™me source de donn√©es
 */

import { useOpenRouterModels } from './lib/hooks/useOpenRouterModels.js';
import { getAllModels } from './lib/models.js';

console.log('üîç V√©rification de la synchronisation des mod√®les...\n');

// 1. V√©rifier les mod√®les depuis le hook
console.log('üì° R√©cup√©ration depuis useOpenRouterModels (source dynamique)...');
const { models: dynamicModels } = await useOpenRouterModels();
console.log(`   ‚úÖ ${dynamicModels.length} mod√®les trouv√©s via API OpenRouter\n`);

// 2. V√©rifier les mod√®les depuis la liste statique
console.log('üìÑ R√©cup√©ration depuis getAllModels (source statique)...');
const staticModels = getAllModels();
console.log(`   ‚úÖ ${staticModels.length} mod√®les trouv√©s dans lib/models.ts\n`);

// 3. Comparer les deux listes
console.log('üîÑ Comparaison des sources de donn√©es...');
if (dynamicModels.length < staticModels.length) {
  console.log(`   ‚ö†Ô∏è  Diff√©rence d√©tect√©e: ${staticModels.length - dynamicModels.length} mod√®les en trop dans la liste statique`);
  console.log(`   ‚ÑπÔ∏è  Ceci est normal si certains mod√®les ont √©t√© retir√©s d'OpenRouter\n`);
} else {
  console.log(`   ‚úÖ Les deux sources ont le m√™me nombre de mod√®les\n`);
}

// 4. V√©rifier les mod√®les obsol√®tes connus
console.log('üîç Recherche de mod√®les obsol√®tes connus...');
const obsoleteModels = [
  'deepseek-r1-distill-qwen-32b',
  'deepseek-r1-distill-qwen-14b',
  'google/learnlm-1.5-pro-experimental',
  'moonshotai/kimi-vl-a3b-thinking',
  'google/gemini-flash-1.5'
];

const dynamicIds = dynamicModels.map(m => m.id);
const staticIds = staticModels.map(m => m.id);

obsoleteModels.forEach(modelId => {
  const inDynamic = dynamicIds.includes(modelId);
  const inStatic = staticIds.includes(modelId);
  
  if (inDynamic) {
    console.log(`   ‚ùå ${modelId} : TROUV√â dans la liste dynamique (probl√®me!)`);
  } else if (inStatic) {
    console.log(`   ‚ö†Ô∏è  ${modelId} : Pr√©sent uniquement dans la liste statique (normal)`);
  } else {
    console.log(`   ‚úÖ ${modelId} : Correctement retir√©`);
  }
});

// 5. V√©rifier le cache localStorage
console.log('\nüíæ V√©rification du cache localStorage...');
const cachedModels = localStorage.getItem('tetika-free-models');
const lastSync = localStorage.getItem('tetika-models-last-sync');

if (cachedModels) {
  const parsed = JSON.parse(cachedModels);
  console.log(`   ‚úÖ Cache trouv√© : ${parsed.length} mod√®les`);
  
  if (lastSync) {
    const syncDate = new Date(parseInt(lastSync));
    const age = Math.floor((Date.now() - syncDate.getTime()) / 1000 / 60); // minutes
    console.log(`   ‚úÖ Derni√®re sync : ${syncDate.toLocaleString()} (il y a ${age} minutes)`);
    
    if (age > 1440) { // 24h
      console.log(`   ‚ö†Ô∏è  Le cache a plus de 24h, synchronisation recommand√©e`);
    }
  } else {
    console.log(`   ‚ö†Ô∏è  Timestamp de sync manquant`);
  }
} else {
  console.log(`   ‚ÑπÔ∏è  Pas de cache trouv√© (premi√®re utilisation)`);
}

// 6. R√©sum√©
console.log('\n' + '='.repeat(60));
console.log('üìä R√âSUM√â');
console.log('='.repeat(60));
console.log(`Source dynamique (OpenRouter) : ${dynamicModels.length} mod√®les`);
console.log(`Source statique (lib/models)  : ${staticModels.length} mod√®les`);
console.log(`Diff√©rence                    : ${Math.abs(staticModels.length - dynamicModels.length)} mod√®les`);
console.log('\n‚úÖ V√©rification termin√©e');

// 7. Recommandations
console.log('\nüí° RECOMMANDATIONS :');
if (dynamicModels.length < staticModels.length) {
  console.log('   ‚Ä¢ ModelSelector devrait maintenant utiliser useOpenRouterModels()');
  console.log('   ‚Ä¢ Vider le cache et actualiser pour voir les changements');
  console.log('   ‚Ä¢ Commandes : localStorage.clear() puis cliquer sur Actualiser');
}
